/*Mixin used to generate slightly smaller text and forms
Used in side panels and action tabs
*/
div.TreeDropdownField {
  width: 400px;
  background: #fff;
  border: 1px solid #aaa;
  cursor: pointer;
  overflow: visible;
  position: relative;
}

div.TreeDropdownField input {
  border: none;
  background: none;
  padding: 0;
  margin: 0;
}

div.TreeDropdownField .treedropdownfield-title, div.TreeDropdownField .treedropdownfield-search {
  float: left;
  padding: 7px;
  width: 90%;
  line-height: 16px;
  overflow: hidden;
  outline: none;
  z-index: 1;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  -o-text-overflow: ellipsis;
}

div.TreeDropdownField .treedropdownfield-search {
  background: url("../admin/thirdparty/chosen/chosen/chosen-sprite.png") no-repeat 100% -22px;
  background: url("../admin/thirdparty/chosen/chosen/chosen-sprite.png") no-repeat 100% -22px, -webkit-gradient(linear, left top, left bottom, color-stop(1%, #eeeeee), color-stop(15%, #ffffff));
  background: url("../admin/thirdparty/chosen/chosen/chosen-sprite.png") no-repeat 100% -22px, -webkit-linear-gradient(top, #eeeeee 1%, #ffffff 15%);
  background: url("../admin/thirdparty/chosen/chosen/chosen-sprite.png") no-repeat 100% -22px, -o-linear-gradient(top, #eeeeee 1%, #ffffff 15%);
  background: url("../admin/thirdparty/chosen/chosen/chosen-sprite.png") no-repeat 100% -22px, linear-gradient(to bottom, #eeeeee 1%, #ffffff 15%);
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  position: relative;
  z-index: 1100;
  border: 1px solid #aaa;
  display: inline-block;
  font-family: sans-serif;
  font-size: 1em;
  margin: 1.5%;
  outline: 0;
  padding: 4px 20px 4px 5px;
  width: 97%;
}

div.TreeDropdownField.searchable .treedropdownfield-panel.loading {
  min-height: 16px 14px 34px;
  background-position: 98% 39px;
}

div.TreeDropdownField .treedropdownfield-panel {
  clear: left;
  position: absolute;
  display: none;
  cursor: default;
  border: 1px solid #aaa;
  border-top: none;
  margin: 1px 0 0 -1px;
  /* account for border on container div */
  background-color: #fff;
  z-index: 70;
  -webkit-box-shadow: 0 4px 5px rgba(0, 0, 0, 0.15);
  -o-box-shadow: 0 4px 5px rgba(0, 0, 0, 0.15);
  box-shadow: 0 4px 5px rgba(0, 0, 0, 0.15);
}

div.TreeDropdownField .treedropdownfield-panel.loading {
  min-height: 16px 14px;
  background: #fff url("../images/network-save.gif") 98% 7px no-repeat;
}

div.TreeDropdownField .treedropdownfield-panel .tree-holder {
  position: relative;
  z-index: 1;
}

div.TreeDropdownField .treedropdownfield-panel .tree-holder > ul {
  position: relative;
  max-height: 200px;
  overflow-y: auto;
}

div.TreeDropdownField .treedropdownfield-panel ul {
  overflow-x: hidden;
  float: left;
  width: 100%;
}

div.TreeDropdownField .treedropdownfield-panel ul .jstree-icon {
  margin-left: 5px;
}

div.TreeDropdownField .treedropdownfield-panel ul .jstree-open > ins {
  background-position: -18px 0;
}

div.TreeDropdownField .treedropdownfield-panel ul.tree {
  margin: 0;
}

div.TreeDropdownField .treedropdownfield-panel ul.tree a {
  font-size: 12px;
}

div.TreeDropdownField .treedropdownfield-toggle-panel-link {
  border: none;
  margin: 0;
  z-index: 0;
  padding: 7px 3px;
  overflow: hidden;
  border-radius: 0 4px 4px 0;
}

div.TreeDropdownField .treedropdownfield-toggle-panel-link.treedropdownfield-open-tree {
  background: transparent;
  border: none;
}

div.TreeDropdownField .treedropdownfield-toggle-panel-link a {
  text-decoration: none;
  display: block;
  border: 0;
  margin: 0;
  opacity: 0.5;
}

div.TreeDropdownField a.jstree-loading .jstree-pageicon {
  background: #fff url("../images/network-save.gif") center center no-repeat;
}

/*# sourceMappingURL=data:application/json;base64, */
